#!/usr/bin/env python3
"""Safe demo runner for malware sandbox scaffold.

This script is deliberately safe: it does not execute arbitrary binaries. Instead
it demonstrates how an analysis runner could be structured and shows where to
integrate instrumentation (process tracing, network capture, etc.) in a real
isolated VM.

Usage (demo):
  python3 runner.py --sample samples/benign-example.txt
"""

import argparse
import json
import os
import time


def analyze_sample(sample_path, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    # This demo reads the sample file and creates a fake report. DO NOT run binaries here.
    with open(sample_path, "r", encoding="utf-8") as fh:
        content = fh.read()

    report = {
        "sample": os.path.basename(sample_path),
        "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
        "notes": "This is a safe demo run; no code was executed.",
        "observations": {
            "strings": content.split()[:20],
            " yara_matches": []
        }
    }

    out_path = os.path.join(output_dir, os.path.basename(sample_path) + ".report.json")
    with open(out_path, "w", encoding="utf-8") as fh:
        json.dump(report, fh, indent=2)

    print(f"Wrote report: {out_path}")
    return out_path


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--sample", required=True, help="Path to a harmless sample (text) for demo")
    parser.add_argument("--out", default="reports", help="Output directory for reports")
    args = parser.parse_args()

    if not os.path.exists(args.sample):
        print("Sample not found:", args.sample)
        return

    analyze_sample(args.sample, args.out)


if __name__ == "__main__":
    main()
